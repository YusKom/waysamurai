{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","serviceWorker.js","redux/profile-reducer.js","redux/dialogs-reducer.js","redux/sidebar-reducer.js","redux/store.js","components/Header/Header.jsx","components/Navbar/Navbar.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","profileReducer","state","action","type","newPost","id","message","newPostText","likesCount","posts","push","newText","dialogsReducer","newMessageBody","body","messages","sidebarReducer","store","_state","profilePage","dialogsPage","dialogs","name","_callSubscriber","console","log","getState","this","subscribe","observer","dispatch","sidebar","Header","className","s","header","src","Navbar","nav","item","to","activeClassName","active","friends","Post","props","MyPosts","postsElements","map","p","newPostElement","React","createRef","postsBlock","onChange","text","updateNewPostTextActionCreator","current","value","ref","onClick","ProfileInfo","Profile","DialogItem","path","dialog","Message","Dialogs","dialogElements","d","messagesElements","m","e","target","updateNewMessageBodyCreator","placeholder","News","Music","Settings","App","render","rerenderEntireTree","ReactDOM","StrictMode","bind","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.252d8109.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__aQqiQ\",\"item\":\"Navbar_item__2MQin\",\"active\":\"Navbar_active__1NW4O\",\"friends\":\"Navbar_friends__3Dfq4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__w2LQ8\",\"dialogsItems\":\"Dialogs_dialogsItems__3aR40\",\"active\":\"Dialogs_active__2tzep\",\"messages\":\"Dialogs_messages__3aDIT\",\"message\":\"Dialogs_message__1sz_u\",\"dialog\":\"Dialogs_dialog__1fKot\",\"textmsg\":\"Dialogs_textmsg__EVpJR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2Ptd6\",\"posts\":\"MyPosts_posts__N2oBe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3WwKA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__38Klb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1EVfR\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\n\r\nconst profileReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case  ADD_POST:\r\n                let newPost = {\r\n                    id: 5,\r\n                    message: state.newPostText,\r\n                    likesCount: 0\r\n                };\r\n            state.posts.push(newPost);\r\n            state.newPostText = '';\r\n            return state;\r\n        case UPDATE_NEW_POST_TEXT:\r\n                state.newPostText = action.newText;\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n\r\n    }\r\n\r\n\r\nexport const addPostActionCreator = () => ({ type: ADD_POST })\r\nexport const updateNewPostTextActionCreator = (text) =>\r\n    ({type: 'UPDATE-NEW-POST-TEXT', newText: text})\r\n\r\n\r\nexport default profileReducer;","import profileReducer from \"./profile-reducer\";\r\n\r\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_MESSAGE_BODY';\r\nconst SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\n\r\nconst dialogsReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            state.newMessageBody = action.body;\r\n            return state;\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody;\r\n            state.newMessageBody = '';\r\n            state.messages.push({id: 6, message: body});\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const sendMessageCreator = () => ({ type: SEND_MESSAGE })\r\nexport const updateNewMessageBodyCreator = (body) =>\r\n    ({type: 'UPDATE_NEW_MESSAGE_BODY', body: body})\r\n\r\nexport default dialogsReducer;","import profileReducer from \"./profile-reducer\";\r\n\r\nconst sidebarReducer = (state, action) => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\n\r\nlet store = {\r\n    _state: {\r\n        profilePage: {\r\n            posts: [\r\n                {id: 1, message: 'Hi, how r u', likesCount: 12},\r\n                {id: 2, message: 'It\\'s my first post', likesCount: 23},\r\n                {id: 3, message: 'Blablabla', likesCount: 5},\r\n                {id: 4, message: 'Dada', likesCount: 3}\r\n            ],\r\n            newPostText: 'it-kamasutra.com'\r\n        },\r\n        dialogsPage: {\r\n            messages: [\r\n                {id: 1, message: 'Hi'},\r\n                {id: 2, message: 'How is your it-kamasutra'},\r\n                {id: 3, message: 'Yo'},\r\n                {id: 4, message: 'Yo'},\r\n                {id: 5, message: 'Yo'}\r\n            ],\r\n            dialogs: [\r\n                {id: 1, name: 'Dimych'},\r\n                {id: 2, name: 'Andrew'},\r\n                {id: 3, name: 'Sveta'},\r\n                {id: 4, name: 'Sasha'},\r\n                {id: 5, name: 'Viktor'},\r\n                {id: 6, name: 'Valera'}\r\n            ],\r\n            newMessageBody: \"\"\r\n        }\r\n    },\r\n    _callSubscriber() {\r\n        console.log('state changed');\r\n    },\r\n\r\n    getState() {\r\n        return this._state;\r\n    },\r\n    subscribe(observer) {\r\n        this._callSubscriber = observer;\r\n    },\r\n\r\n    dispatch(action) {\r\n        this._state.profilePage = profileReducer(this._state.profilePage, action);\r\n        this._state.dialogsPage = dialogsReducer(this._state.dialogsPage, action);\r\n        this._state.sidebar = sidebarReducer(this._state.sidebar, action);\r\n        this._callSubscriber(this._state);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default store;\r\n\r\nwindow.store = store;","import React from 'react';\r\nimport s from './Header.module.css'\r\n\r\nconst Header = () => {\r\nreturn <header className={s.header}>\r\n        <img src='http://media.breitbart.com/media/2015/01/nickelodeon.png' />\r\n      </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport s from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return <nav className={s.nav}>\r\n        <div className={s.item}>\r\n            <NavLink to={\"/profile\"} activeClassName={s.active}>Profile</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to={\"/dialogs\"} activeClassName={s.active}>Messages</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to={\"/news\"} activeClassName={s.active}>News</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to={\"/music\"} activeClassName={s.active}>Music</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to={\"/settings\"} activeClassName={s.active}>Settings</NavLink>\r\n        </div>\r\n        <div className={s.friends}>\r\n            <NavLink to={\"/friends\"} activeClassName={s.active}>Friends</NavLink>\r\n        </div>\r\n\r\n    </nav>\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://the-geek.ru/wp-content/uploads/2018/01/anonymous_web-thumb-large.jpg' />\r\n      { props.message }\r\n      <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\r\n\r\n\r\n\r\n\r\n\r\nconst MyPosts = (props) => {\r\n    let postsElements =\r\n        props.posts.map (p => <Post message= {p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let addPost = () => {\r\n       props.dispatch(addPostActionCreator());\r\n       }\r\n\r\n    let onPostChange = () => {\r\n        let text = newPostElement.current.value;\r\n        let action = updateNewPostTextActionCreator(text);\r\n        props.dispatch(action);\r\n    }\r\n\r\n\r\n\r\n    return (<div className={s.postsBlock}>\r\n            <div>\r\n               <h3> My posts</h3>\r\n                <div>\r\n                    <div>\r\n                        <textarea onChange={onPostChange} ref={newPostElement}\r\n                                  value={props.newPostText}/>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick= {addPost}>Add post</button>\r\n                        <button>Remove</button>\r\n                    </div>\r\n                </div>\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\n\r\nconst ProfileInfo = () => {\r\n    return <div>\r\n\r\n        <div>\r\n            <img src='https://www.w3schools.com/css/trolltunga.jpg'/>\r\n        </div>\r\n        <div className={\"s.descriptionBlock\"}>\r\n            ava + description\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {addPost} from \"../../redux/store\";\r\n\r\nconst Profile = (props) => {\r\n\r\n\r\n    return <div>\r\n        <ProfileInfo/>\r\n        <MyPosts posts ={props.profilePage.posts}\r\n                 newPostText={props.profilePage.newPostText}\r\n                 dispatch={props.dispatch} />\r\n    </div>\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <img src=\"https://cdn.imgbin.com/23/20/1/imgbin-computer-icons-user-material-design-business-login-dizzy-ewrGzdFVeB0hkYUk3QKvfzuVP.jpg\" />\r\n           <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n    return  <div>\r\n        <div className={s.message}>{props.message}</div>\r\n\r\n    </div>\r\n\r\n}\r\n\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reducer\";\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.store.getState().dialogsPage;\r\n    let dialogElements = state.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message}/>);\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n    /*Adding text message area*/\r\n    let newMsgElement = React.createRef();\r\n    let addMsg = () => {\r\n        let text = newMsgElement.current.value;\r\n        alert(text);\r\n    }\r\n\r\n    let onSendMessageClick = () => {\r\n        props.store.dispatch(sendMessageCreator());\r\n    }\r\n    let onNewMessageChange = (e) => {\r\n        let body = e.target.value;\r\n        props.store.dispatch(updateNewMessageBodyCreator(body));\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={\"s.dialogsItems\"}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <div><textarea value={newMessageBody}\r\n                                   onChange={onNewMessageChange}\r\n                                   placeholder='Enter your message'> </textarea></div>\r\n                    <div>\r\n                        <button onClick={onSendMessageClick}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import  React from 'react';\r\n\r\n\r\nconst News = (props) => {\r\n    return (\r\n        <div>\r\n            Hello, here is our news. Soon be cool!!!\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import  React from 'react';\r\n\r\n\r\nconst Music = (props) => {\r\n    return (\r\n        <div>\r\n            Hello. it's me :)\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import  React from 'react';\r\n\r\n\r\nconst Settings = (props) => {\r\n    return (\r\n        <div>\r\n            Hello. it's me :)\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Navbar from './components/Navbar/Navbar';\nimport Profile from './components/Profile/Profile';\nimport Dialogs from './components/Dialogs/Dialogs';\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport {addPost, updateNewPostText} from \"./redux/store\";\n\n\nconst App = (props) => {\n\n\n    return (\n           <div className='app-wrapper'>\n                <Header/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path={'/dialogs'}\n                           render={() => <Dialogs store={props.store} />}/>\n                    <Route path={'/profile'}\n                           render={() => <Profile\n                               profilePage={props.state.profilePage}\n                               dispatch={props.dispatch}\n                           />}/>\n                    <Route path={'/news'} render={() => <News/>}/>\n                    <Route path={'/music'} render={() => <Music/>}/>\n                    <Route path={'/settings'} render={() => <Settings/>}/>\n                </div>\n\n            </div>\n\n    )\n}\n\n\nexport default App;\n","import React from 'react';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/store\";\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport {addPost, updateNewPostText} from \"./redux/store\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport Profile from \"./components/Profile/Profile\";\n\n\nlet rerenderEntireTree = (state) => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <BrowserRouter>\n                <App state={state} dispatch ={store.dispatch.bind(store)}  store={store}/>\n            </BrowserRouter>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n\n}\n\n\n\nrerenderEntireTree(store.getState());\nstore.subscribe(rerenderEntireTree);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}